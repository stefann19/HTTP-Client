#pragma once
#include "HTTPEquation.h"
#include "asio.hpp"
#include "json11.hpp"
#include <vector>
#include <fstream>
#include <chrono>
#include <thread>
typedef std::pair<std::string, std::string> stringPair;
typedef std::pair<std::string, std::string>(*ScriptFunction)(std::string); // function pointer type 
typedef std::map<stringPair, ScriptFunction> script_map;




using asio::ip::tcp;




session::session(tcp::socket socket)
	: socket_(std::move(socket))
{
}

void session::start()
{

	do_read();
	PacketInfo pack;
	Write(pack);
}

void Write(PacketInfo packet) {
	packet.httpV = "1.1";
	std::string resp = "";
	resp = "POST / Equation HTTP / 1.1 \
			Host: 127.0.0.1 : 8080 \
			Connection : keep - alive \
			Content - Length : 31 \
			Accept : text / plain, */*; q=0.01 \
									Origin: http://127.0.0.1:8080 \
									X-Requested-With: XMLHttpRequest \
									User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, \
									like Gecko) Chrome/58.0.3029.110 Safari/537.36 \
									Content-Type: application/x-www-form-urlencoded; charset=UTF-8 \
									Referer: http://127.0.0.1:8080/Equaton.htm \
									Accept-Encoding: gzip, deflate, br \
									Accept-Language: en-US,en;q=0.8 \
 \
									------ \" <br> \" \
\
\
									------ ════════════════════════════════════════════════════════════════════════  \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════ \
									════════════════════════════════════════════════════════════════════════════════";

	/*std::cout << std::endl;
	strcpy(buffsize, resp.c_str());
	asio::write(socket_,buff );
	std::cout << buffsize << std::endl;
	do_write(resp.length());*/
}

void session::do_read()
{
	std::this_thread::sleep_for(std::chrono::milliseconds(10));
	auto self(shared_from_this());
	socket_.async_read_some(asio::buffer(data_, max_length),
		[this, self](std::error_code ec, std::size_t length)
	{
		std::string resp = "";
		if (!ec)
		{

		}
	});
	/*socket_.read_some(asio::buffer(data_, max_length));
	std::cout << data_ << std::endl;*/
}

void session::do_write(int length)
{
	auto self(shared_from_this());
	asio::async_write(socket_, asio::buffer(buffsize, length),
		[this, self](std::error_code ec, std::size_t /*length*/)
	{

		if (!ec)
		{
			std::cout <<std::endl<< buffsize;
			//do_read();
		}
	});
}


class server
{
public:
	server(asio::io_service& io_service, short port)
		: acceptor_(io_service, tcp::endpoint(tcp::v4(), port)),
		socket_(io_service)
	{
		do_accept();
	}

private:
	void do_accept()
	{
		acceptor_.async_accept(socket_,
			[this](std::error_code ec)
		{
			if (!ec)
			{
				std::make_shared<session>(std::move(socket_))->start();
			}
			do_accept();
		});
	}

	tcp::acceptor acceptor_;
	tcp::socket socket_;
};

void StartHTTPServicee(int port) {
	try
	{
		asio::io_service io_service;
		server s(io_service, port);
		io_service.run();
	}
	catch (std::exception& e)
	{
		std::cerr << "Exception: " << e.what() << "\n";
	}

}